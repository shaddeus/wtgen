%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%DocumentNeedsFonts: (atend)
%%DocumentSuppliedFonts: (atend)
%%Creator: Frame 5.5
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.5, for use with Adobe Unix Frame 5.5 products
%
% This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
% All rights reserved.  This ps_prolog file may be freely copied and 
% distributed in conjunction with documents created using FrameMaker, 
% FrameMaker+SGML, FrameReader, and FrameViewer as long as this 
% copyright notice is preserved.
/FMDocSave save def
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.5) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	2 copy exch = = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsetsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orghalftone
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
	/tintGray
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known systemdict /currentdistillerparams known and {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix defaultmatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 1] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/tintCMYK {
	1 tintGray sub FrameCurColors 0 4 getinterval aload pop 	
	4 index mul 5 1 roll										
	3 index mul 5 1 roll										
	2 index mul 5 1 roll										
	mul 4 1 roll												
}bind def
/tintRGB {
	1 tintGray sub FrameCurColors 4 3 getinterval aload pop 	
	1 exch sub 3 index mul 1 exch sub 4 1 roll					
	1 exch sub 2 index mul 1 exch sub 4 1 roll					
	1 exch sub mul 1 exch sub 3 1 roll							
}bind def
/combineColor {
	/tintGray 1 1 FrameCurGray sub FrameCurColors 7 get mul sub def
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			tintCMYK FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				tintGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					tintCMYK
					RealSetcmykcolor
				} {
					tintRGB
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ tintGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{tintGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop tintGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop tintGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop tintGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix defaultmatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix defaultmatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	fMLevel1 {
		FMPColor {
			orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
		}
		{
			orgxfer cvx settransfer
		} ifelse
		orgfreq organgle orgproc cvx setscreen
	} {
		orghalftone sethalftone
	}ifelse
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	dup 1 gt {/#copies exch def} {pop} ifelse
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	fMLevel1 not {
		/orghalftone currenthalftone def
	}if 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMENDDOCUMENT {
	FMDocSave restore	
} def
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature: *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	
	mark
	statusdict begin 
		/setpageparams where {
			pop
			paperwidth paperheight 0 1 
			{setpageparams} stopped 
		} { 
			true 
		} ifelse
		
		{
			
			/setpagedevice where {
				pop 
				1 dict dup begin
					/PageSize [ paperwidth paperheight ] def
				end 
				{setpagedevice} stopped
			} {
				true	
			} ifelse
		} {
			false		
		} ifelse 
	end
	{cleartomark true}{cleartomark false}ifelse
} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		8 1 roll
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
		8 -1 roll
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add dup 0 ne {div} {pop pop .5} ifelse fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	[FMsetsize 0 0 FMpointsize 0 0] makefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	/FMsetsize FMpointsize def
	F 
	} bind def
/QQ { 
	/FMsetsize exch def
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	2 copy 0.0 0.0 1.0 5 3 roll arc 
	round cvi 360 mod exch round cvi 360 mod eq {closepath} if 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.5) FMVERSION
1 1 0 0 612 792 0 1 11 FMDOCUMENT
%%IncludeFont: Times-Bold
0 0 /Times-Bold FMFONTDEFINE
%%IncludeFont: Courier-Bold
1 0 /Courier-Bold FMFONTDEFINE
%%IncludeFont: Times-Roman
2 0 /Times-Roman FMFONTDEFINE
%%IncludeFont: Times-Italic
3 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 1 K
J
72 -101/G997338 FmPA
72 612/G997335 FmPA
0 14 Q
0 X
(N) 63 701.67 T
(AME) 72.83 701.67 T
63 -54/G997352 FmPA
1 11 Q
(gengraph.pl) 63 681 T
2 12 Q
(-) 141.48 681 T
(T) 148.15 681 T
(ransforms) 155.06 681 T
(T) 205.72 681 T
(raf) 212.63 681 T
(\336c) 225.65 681 T
(Generator\050TG\051\325) 240.33 681 T
(s) 315.63 681 T
(binary) 322.97 681 T
(output) 356.3 681 T
(\336le) 389.64 681 T
(data) 407.65 681 T
(into) 430.32 681 T
(formats) 451.66 681 T
(suitable) 490.99 681 T
63 -33/G997480 FmPA
(for vie) 63 667 T
(wing with xplot, xgraph, or gnuplot.) 94.36 667 T
0 14 Q
(SYNOPSIS) 63 637.67 T
63 10/G997481 FmPA
1 11 Q
(gengraph.pl [-h | --help] [-c) 67.08 617 T
3 12 Q
(client-\336le) 261.48 617 T
1 11 Q
(] [-s) 306.8 617 T
3 12 Q
(server) 346.4 617 T
(-\336le) 376.15 617 T
1 11 Q
(]) 394.81 617 T
63 31/G997479 FmPA
([-o) 99 603 T
3 12 Q
(output-\336le) 121.8 603 T
1 11 Q
(] [-f) 171.13 603 T
(xplot | xgraph | gnuplot]) 207.13 603 T
63 45/G997353 FmPA
(   [-SQ] [-DR] [-D] [-AD] [-S] [-R] [-IS] [-IR] [-J] [-AJ] [-L]) 90 589 T
63 59/G997354 FmPA
63 73/G997355 FmPA
0 14 Q
(DESCRIPTION) 63 545.67 T
63 102/G997368 FmPA
1 11 Q
(gengraph.pl) 63 525 T
2 12 Q
(is a perl script that con) 142.2 525 T
(v) 250.7 525 T
(erts TG binary output \336le data into a format suitable for) 256.52 525 T
63 123/G997371 FmPA
(vie) 63 511 T
(wing using graphical tools.) 77.36 511 T
0 14 Q
(OPERA) 63 481.67 T
(TION) 110.67 481.67 T
63 166/G997375 FmPA
1 11 Q
(gengraph.pl) 63 461 T
2 12 Q
(in) 142.2 461 T
(v) 151.06 461 T
(ok) 156.82 461 T
(es) 168.7 461 T
1 11 Q
( dcat) 178.69 461 T
2 12 Q
( \050part of the TG distrib) 211.69 461 T
(ution\051 to \336rst con) 320.44 461 T
(v) 402.96 461 T
(ert log \336le data into ascii) 408.78 461 T
63 187/G1003188 FmPA
(form. The script parses) 63 447 T
1 11 Q
(dcat) 176.64 447 T
2 12 Q
(\325) 203.04 447 T
(s) 206.38 447 T
(output and populates internal data structures. The script e) 214.04 447 T
(xtracts) 488.82 447 T
(the datasets selected by the user and outputs this data in the required output format.) 63 433 T
63 229/G998497 FmPA
0 F
(Input.) 63 405 T
2 F
( Both the client-side and the serv) 94.68 405 T
(er) 252.48 405 T
(-side log \336les must be pro) 261.56 405 T
(vided to gengraph.) 385.72 405 T
63 243/G997384 FmPA
(When the input \336le names are not speci\336ed,) 63 391 T
1 11 Q
( gengraph.pl) 273.64 391 T
2 12 Q
(assumes the TG log \336les on the cli-) 359.44 391 T
63 257/G999214 FmPA
(ent and the serv) 63 377 T
(er sides to be) 138.47 377 T
3 F
(client.lo) 204.46 377 T
(g) 243.34 377 T
2 F
( and) 249.34 377 T
3 F
(server) 272.66 377 T
(.lo) 301.32 377 T
(g) 313.54 377 T
2 F
(respecti) 322.54 377 T
(v) 359.56 377 T
(ely) 365.38 377 T
(.) 379.26 377 T
63 285/G997390 FmPA
0 F
(Output.) 63 349 T
2 F
(The output \336le name can be speci\336ed using the) 106.34 349 T
3 F
(-o) 335.32 349 T
2 F
(option to the script. When the user) 348.31 349 T
63 299/G997919 FmPA
(does) 63 335 T
(not) 87.9 335 T
(specify) 106.14 335 T
(an) 143.7 335 T
(y) 154.85 335 T
(output) 163.75 335 T
(\336le) 197.33 335 T
(name,) 215.57 335 T
1 11 Q
(gengraph.pl) 247.47 335 T
2 12 Q
(uses) 326.46 335 T
(the) 350.02 335 T
(name) 367.59 335 T
3 F
(stats.xpl) 396.49 335 T
2 F
(.) 436.16 335 T
(In) 442.07 335 T
(case) 454.97 335 T
(of) 478.52 335 T
(gnuplot) 491.42 335 T
(tw) 63 321 T
(o) 74.88 321 T
(output) 83.52 321 T
(\336les) 116.83 321 T
(are) 139.47 321 T
(created) 156.76 321 T
(by) 194.04 321 T
(the) 208.68 321 T
(script:) 225.98 321 T
(one) 258.62 321 T
(containing) 278.59 321 T
(the) 331.89 321 T
(gnuplot) 349.19 321 T
3 F
(plot) 388.5 321 T
2 F
(command) 409.81 321 T
(in) 459.78 321 T
(the) 471.75 321 T
(\336le) 489.05 321 T
(with) 507.03 321 T
3 F
(.dem) 63 307 T
2 F
(name) 88.56 307 T
(e) 117.12 307 T
(xtension) 122.27 307 T
3 F
(,) 162.94 307 T
2 F
(and) 168.5 307 T
(another) 188.4 307 T
(containing) 226.96 307 T
(the) 280.19 307 T
(datasets) 297.42 307 T
(in) 337.98 307 T
(the) 349.88 307 T
(\336le) 367.12 307 T
(with) 385.02 307 T
3 F
(.dat) 408.92 307 T
2 F
(name) 429.83 307 T
(e) 458.39 307 T
(xtension.) 463.54 307 T
(The) 509.77 307 T
(graphical output format can be speci\336ed on the command line using the) 63 293 T
1 11 Q
( -f) 406.62 293 T
2 12 Q
(option. The def) 433.02 293 T
(ault) 506.56 293 T
(output format is) 63 279 T
3 F
(xplot.) 142.67 279 T
1 11 Q
(gengraph.pl) 172.67 279 T
2 12 Q
( supports xgraph, xplot, and gnuplot tools.) 245.27 279 T
63 383/G999228 FmPA
0 F
(V) 63 251 T
(iewing the plots) 71.22 251 T
2 F
(. The commands to vie) 151.22 251 T
(w the plots are as follo) 260.58 251 T
(ws:) 369.26 251 T
63 397/G999229 FmPA
(   xgraph: xgraph -M -nl -tk -p -bb <) 63 237 T
3 F
(output-\336le) 237.07 237 T
2 F
(>) 286.4 237 T
63 411/G999230 FmPA
(   xplot: xplot <) 63 223 T
3 F
(output-\336le) 137.45 223 T
2 F
(>) 186.78 223 T
63 425/G999231 FmPA
(   gnuplot: gnuplot <) 63 209 T
3 F
(output-\336le) 161.45 209 T
2 F
(>.dem) 210.78 209 T
63 439/G999232 FmPA
63 453/G999233 FmPA
(The v) 63 181 T
(arious graphical tools are a) 90.36 181 T
(v) 219.42 181 T
(ailable at the follo) 225.12 181 T
(wing URLs:) 311.81 181 T
63 467/G999292 FmPA
(    Xgraph:) 63 167 T
3 F
(http://jean-luc.ncsa.uiuc.edu/Codes/xgr) 117.32 167 T
(aph/) 307.46 167 T
63 481/G999299 FmPA
2 F
(    Xplot:) 63 153 T
3 F
(http://www) 108.67 153 T
(.esrf) 161.14 153 T
(.fr/computing/scienti\336c/xop/xplot/) 181.96 153 T
63 495/G999300 FmPA
2 F
(    Gnuplot:) 63 139 T
3 F
(ftp://ftp.ucc.ie/pub/gnuplot) 120.67 139 T
63 509/G999237 FmPA
63 523/G997965 FmPA
0 F
(Jitter calculation) 63 111 T
2 F
(. F) 149.99 111 T
(or this, we \336rst compute the a) 162.48 111 T
(v) 304.56 111 T
(erage delay o) 310.38 111 T
(v) 374.17 111 T
(er the entire duration of the) 379.99 111 T
63 537/G1000374 FmPA
(e) 63 97 T
(xperiment. W) 68.15 97 T
(e use this a) 133.18 97 T
(v) 185.93 97 T
(erage delay computation to compute the de) 191.75 97 T
(viation of the delay corre-) 398.08 97 T
(sponding) 63 83 T
(to) 109.69 83 T
(indi) 121.72 83 T
(vidual) 140.09 83 T
(data) 172.78 83 T
(pack) 195.46 83 T
(ets,) 218 83 T
(i.e.,) 237.02 83 T
(jitter) 257.37 83 T
(.) 279.38 83 T
(The) 285.07 83 T
(e) 306.42 83 T
(xperimenter) 311.56 83 T
(must) 372.24 83 T
(modify) 398.27 83 T
(the) 435.62 83 T
(implementation) 452.98 83 T
[/Creator(FrameMaker xm5.5P4f)/DOCINFO FmPD2
[/CropBox[0 0 FmDC 612 792 FmDC FmBx]/PAGE FmPD
[/Dest/P.1/DEST FmPD2
[/Dest/F/DEST FmPD2
[/Rect[63 163 117 175]/Border[0 0 0]/Action 2 dict dup begin/Subtype/URI def/URI(http://www.intel.com)def end/LNK FmPD2
117 319/I1.999293 FmPA
117 319/M8.newlink.wwwintelcom FmPA
117 319/I1.999294 FmPA
117 319/M8.newlink.httpjeanlucncsauiuceduCodesxgraph FmPA
117 319/I1.999295 FmPA
117 319/M8.newlink.httpjeanlucncsauiuceduCodesxgraph. FmPA
117 319/I1.999296 FmPA
[/Rect[117 163 120 175]/Border[0 0 0]/Dest/M8.newlink.jeanlucncsauiuceduCodesxgraph./Action/GoToR/File(http.pdf)/LNK FmPD2
117 319/I1.999297 FmPA
[/Rect[117 163 120 175]/Border[0 0 0]/Dest/M8.newlink.wwwintelcom/Action/GoToR/File(http.pdf)/LNK FmPD2
117 319/I1.999298 FmPA
[/Rect[117 163 120 175]/Border[0 0 0]/Dest/M8.newlink.3/Action/GoToR/File(x.pdf)/LNK FmPD2
117 319/I1.999303 FmPA
117 319/I1.999304 FmPA
[/Rect[117 163 120 175]/Border[0 0 0]/Action 2 dict dup begin/Subtype/URI def/URI(http://jean-luc.ncsa.uiuc.edu/Codes/xgraph/)def end/LNK FmPD2
117 319/I1.999305 FmPA
[/Rect[117 163 120 175]/Border[0 0 0]/Action 2 dict dup begin/Subtype/URI def/URI(http://www.intel.com)def end/LNK FmPD2
117 319/I1.999306 FmPA
[/Rect[117 163 120 175]/Border[0 0 0]/Action 2 dict dup begin/Subtype/URI def/URI(http://www.intel.com)def end/LNK FmPD2
117 319/I1.1000249 FmPA
[/Rect[108 149 531 161]/Border[0 0 0]/Action 2 dict dup begin/Subtype/URI def/URI(http://www.esrf.fr/computing/scientific/xop/xplot/)def end/LNK FmPD2
108 305/I1.1000250 FmPA
[/Rect[121 135 531 147]/Border[0 0 0]/Action 2 dict dup begin/Subtype/URI def/URI(ftp://ftp.ucc.ie/pub/gnuplot)def end/LNK FmPD2
121 291/I1.1000251 FmPA
117 319/I1.1000252 FmPA
[/Rect[117 163 531 175]/Border[0 0 0]/Action 2 dict dup begin/Subtype/URI def/URI(http://jean-luc.ncsa.uiuc.edu/Codes/xgraph/ )def end/LNK FmPD2
117 319/I1.1000253 FmPA
[/Title(1)/Rect[54 54 540 720]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 1 K
2 12 Q
0 X
(to re\337ect his/her notion of jitter) 72 712 T
(, which could be the dif) 221.84 712 T
(ference in the delay measured for succes-) 334.86 712 T
(si) 72 698 T
(v) 79.7 698 T
(e pack) 85.52 698 T
(ets.) 116.39 698 T
72 828/G1000375 FmPA
0 F
(Plots.) 72 670 T
2 F
(All) 102.91 670 T
(plots) 120.82 670 T
(are) 146.74 670 T
(generated) 163.96 670 T
(with) 213.18 670 T
(time) 237.09 670 T
(as) 261.01 670 T
(the) 273.58 670 T
(x-axis.) 290.82 670 T
(The) 325.72 670 T
(speci\336c) 346.95 670 T
(data) 386.19 670 T
(set) 408.76 670 T
(to) 424.67 670 T
(be) 436.58 670 T
(e) 450.48 670 T
(xtracted) 455.63 670 T
(from) 496.86 670 T
(the) 522.76 670 T
72 814/G999243 FmPA
(TG log \336les can be speci\336ed using the command line options identi\336ed belo) 72 656 T
(w in the OPTIONS) 437.02 656 T
(section. The ar) 72 642 T
(guments identify the speci\336c parameter of interest such as the inter) 142.76 642 T
(-arri) 463.8 642 T
(v) 484.15 642 T
(al time or) 489.85 642 T
(the jitter) 72 628 T
(. Multiple data sets can be speci\336ed, b) 111.67 628 T
(ut only certain combinations yield meaningful) 294.41 628 T
(graphs: those whose units match and whose v) 72 614 T
(alues are comparable.) 290.68 614 T
72 744/G999244 FmPA
0 F
(T) 72 586 T
(itle) 79.79 586 T
2 F
(. The def) 95.78 586 T
(ault title of an) 138.65 586 T
(y plot is the start time contained in the client-side log \336le\325) 205.46 586 T
(s header) 482.46 586 T
(.) 521.45 586 T
72 730/G1003193 FmPA
(Ho) 72 572 T
(we) 86.36 572 T
(v) 100.06 572 T
(er) 105.88 572 T
(,) 114.72 572 T
(if) 120.61 572 T
(a) 130.82 572 T
(\336le) 139.04 572 T
(named) 157.26 572 T
3 F
(r) 192.14 572 T
(eadme) 196.36 572 T
2 F
(e) 230.57 572 T
(xists) 235.72 572 T
(in) 260.61 572 T
(the) 272.83 572 T
(current) 290.38 572 T
(w) 327.26 572 T
(orking) 335.8 572 T
(directory) 370.02 572 T
(,) 412.56 572 T
(the) 418.44 572 T
(\336rst) 435.99 572 T
(line) 457.55 572 T
(in) 478.44 572 T
(this) 490.66 572 T
(\336le) 510.89 572 T
(is) 529.11 572 T
(concatenated with the abo) 72 558 T
(v) 196.79 558 T
(e timestamp to form the title.) 202.61 558 T
72 688/G999246 FmPA
0 F
(Computation of A) 72 530 T
(v) 163.46 530 T
(erages.) 169.34 530 T
2 F
( The script computes the a) 205 530 T
(v) 331.07 530 T
(erage delay) 336.89 530 T
(, jitter) 391.08 530 T
(, and send and recei) 419.27 530 T
(v) 513.94 530 T
(e) 519.76 530 T
72 674/G999114 FmPA
(rates, o) 72 516 T
(v) 106.48 516 T
(er user) 112.3 516 T
(-controllable time windo) 144.37 516 T
(ws. The follo) 262.73 516 T
(wing v) 326.09 516 T
(ariables in the script correspond to) 358.79 516 T
(each of the abo) 72 502 T
(v) 144.79 502 T
(e mentioned windo) 150.61 502 T
(ws:) 242.3 502 T
3 F
($aver) 261.97 502 T
(a) 289.12 502 T
(g) 295 502 T
(e_delay_computation_window) 300.88 502 T
(,) 446.65 502 T
($aver) 72 488 T
(a) 99.14 488 T
(g) 105.02 488 T
(e_jitter_computation_window) 110.9 488 T
(,) 254.03 488 T
2 F
(and) 260.03 488 T
3 F
( $r) 277.36 488 T
(ate_computation_window) 290.84 488 T
2 F
(respecti) 417.85 488 T
(v) 454.87 488 T
(ely) 460.69 488 T
3 F
(.) 474.7 488 T
2 F
(The def) 480.7 488 T
(ault) 517.56 488 T
(v) 72 474 T
(alues for these v) 77.7 474 T
(ariables are 1 sec, 0.5 sec, and 0.5 sec respecti) 155.71 474 T
(v) 377 474 T
(ely) 382.82 474 T
(.) 396.71 474 T
72 604/G999115 FmPA
0 F
(Log Err) 72 446 T
(ors) 113.45 446 T
2 F
(. TG records an) 129.44 446 T
(y errors in pack) 203.9 446 T
(et transmission or receipt in the log \336le. The script) 278.76 446 T
72 590/G999111 FmPA
(informs the user of such errors, displaying both the name of the \336le in which the error w) 72 432 T
(as) 495.14 432 T
(observ) 72 418 T
(ed and the line containing the error) 103.81 418 T
(.) 271.12 418 T
72 548/G998978 FmPA
0 F
(Script Err) 72 390 T
(ors.) 124.78 390 T
2 F
(The script assumes that the perl interpreter is located in the) 146.77 390 T
3 F
(/usr/bin) 433.06 390 T
2 F
(directory) 473.4 390 T
(.) 515.94 390 T
72 534/G999146 FmPA
(If perl interpreter is una) 72 376 T
(v) 185.72 376 T
(ailable in that directory) 191.42 376 T
(, a platform and shell speci\336c message such as) 302.29 376 T
72 520/G999155 FmPA
(\322) 72 362 T
3 F
(bash: g) 77.33 362 T
(engr) 112.87 362 T
(aph.pl: No suc) 134.69 362 T
(h \336le or dir) 204.84 362 T
(ectory\323 or \322ntcsh: g) 258.73 362 T
(engr) 356.94 362 T
(aph.pl: bad interpr) 378.76 362 T
(eter: No suc) 469.98 362 T
(h) 528.46 362 T
(\336le) 72 348 T
(or) 89.66 348 T
(dir) 103.32 348 T
(ectory\323) 116.88 348 T
2 F
(may) 156.54 348 T
(be) 180.19 348 T
(obtained.) 194.52 348 T
(If) 241.84 348 T
(the) 252.82 348 T
(perl) 270.48 348 T
(interpreter) 292.14 348 T
(is) 345.11 348 T
(a) 356.11 348 T
(v) 361.2 348 T
(ailable) 366.9 348 T
(in) 401.88 348 T
(a) 414.21 348 T
(dif) 422.54 348 T
(ferent) 435.57 348 T
(path,) 466.55 348 T
(for) 493.21 348 T
(e) 510.19 348 T
(xam-) 515.34 348 T
(ple /local/bin, then the \336rst line of the script must be modi\336ed to re\337ect the correct path. The) 72 334 T
(script) 72 320 T
(also) 101.21 320 T
(assumes) 123.08 320 T
(that) 165.62 320 T
1 11 Q
(dcat) 186.16 320 T
2 12 Q
(is) 215.11 320 T
(a) 225.65 320 T
(v) 230.74 320 T
(ailable) 236.44 320 T
(in) 270.98 320 T
(the) 282.85 320 T
(path.) 300.06 320 T
(If) 326.27 320 T
(dcat) 336.8 320 T
(is) 359.34 320 T
(not) 369.89 320 T
(a) 387.76 320 T
(v) 392.85 320 T
(ailable,) 398.55 320 T
(a) 436.09 320 T
(message) 443.96 320 T
(similar) 487.16 320 T
(to) 523.03 320 T
3 F
(\322Can\325) 72 306 T
(t open client lo) 102.31 306 T
(g: No suc) 173.86 306 T
(h \336le or dir) 219.67 306 T
(ectory\323) 273.56 306 T
2 F
( is displayed.) 310.22 306 T
0 14 Q
(NO) 72 276.67 T
(TES) 92.44 276.67 T
72 421/G999147 FmPA
2 12 Q
(The script is still under de) 72 256 T
(v) 196.69 256 T
(elopment. The user should tak) 202.51 256 T
(e note of the follo) 347.38 256 T
(wing:) 432.4 256 T
72 400/G999097 FmPA
72 386/G1000262 FmPA
(1. The script ignores e) 72 228 T
(xcess log entries in the serv) 178.8 228 T
(er) 310.93 228 T
(-side log. This is possible when the multiple) 320.02 228 T
72 372/G999099 FmPA
(clients) 72 214 T
(send) 106.12 214 T
(data) 130.91 214 T
(to) 153.69 214 T
(the) 165.81 214 T
(serv) 183.27 214 T
(er) 203.08 214 T
(in) 215.19 214 T
(either) 227.32 214 T
(interlea) 257.43 214 T
(v) 293.18 214 T
(ed) 299 214 T
(or) 313.12 214 T
(sequential) 325.9 214 T
(f) 377.35 214 T
(ashion.) 381.23 214 T
1 11 Q
(gengraph.pl) 418.35 214 T
2 12 Q
(does) 497.09 214 T
(not) 521.87 214 T
(handle) 72 200 T
(the) 106.53 200 T
(case) 123.73 200 T
(of) 146.92 200 T
(single-serv) 159.45 200 T
(er) 211.93 200 T
(and) 223.79 200 T
(multiple) 243.65 200 T
(clients.) 286.2 200 T
(The) 323.07 200 T
(script) 344.26 200 T
(displays) 373.46 200 T
(an) 415.34 200 T
(appropriate) 429.2 200 T
(w) 486.39 200 T
(arning) 494.93 200 T
(in) 528.13 200 T
(this case.) 72 186 T
(2. The output generated by the script cannot be piped to another command.) 72 172 T
72 316/G1000336 FmPA
(3. There is a mismatch between the vie) 72 158 T
(ws from v) 259 158 T
(arious graphical tools. W) 307.36 158 T
(e tried to k) 427.04 158 T
(eep the col-) 478.58 158 T
72 302/G999100 FmPA
(ors/graph formats consistent across graphing tools. Ho) 72 144 T
(we) 333.34 144 T
(v) 347.03 144 T
(er) 352.85 144 T
(, we could not control some aspects,) 361.69 144 T
(such as the black background in xplot.) 72 130 T
(4.) 72 116 T
(T) 83.98 116 T
(o) 90.36 116 T
(impro) 99.34 116 T
(v) 127.83 116 T
(e) 133.65 116 T
(clarity) 141.96 116 T
(,) 171.84 116 T
(pack) 177.82 116 T
(et) 200.36 116 T
(drops) 212 116 T
(are) 241.65 116 T
(displayed) 259.29 116 T
(on) 308.26 116 T
(the) 323.25 116 T
(ne) 340.89 116 T
(g) 352.04 116 T
(ati) 357.98 116 T
(v) 369.68 116 T
(e) 375.5 116 T
(y-axis) 383.81 116 T
(i.e.,) 416.12 116 T
(a) 436.77 116 T
(sequence) 445.08 116 T
(number) 492.05 116 T
3 F
(x) 531.69 116 T
72 260/G999102 FmPA
2 F
(dropped at time) 72 102 T
3 F
(t) 150.32 102 T
2 F
( will be indicated by a mark at coordinates) 153.66 102 T
3 F
( \050t, -x\051) 357.62 102 T
2 F
( instead of) 387.28 102 T
3 F
( \050t, x\051) 437.27 102 T
2 F
(. This beha) 462.92 102 T
(vior) 515.68 102 T
(can be modi\336ed by changing the v) 72 88 T
(alue of the v) 237.01 88 T
(ariable) 296.36 88 T
3 F
($r) 332.02 88 T
(e\337ect_dr) 342.24 88 T
(ops) 383.69 88 T
2 F
( in the script from -1 to 1.) 400.36 88 T
[/CropBox[0 0 FmDC 612 792 FmDC FmBx]/PAGE FmPD
[/Dest/P.2/DEST FmPD2
[/Title(1)/Rect[63 63 549 729]/ARTICLE FmPD2
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 1 K
2 12 Q
0 X
(5. TCP might combine pack) 72 712 T
(ets and/or perform retransmissions to achie) 206.88 712 T
(v) 413.54 712 T
(e reliable deli) 419.36 712 T
(v) 484.38 712 T
(ery) 490.2 712 T
(. This) 504.74 712 T
72 856/G999104 FmPA
(can mask/distort certain netw) 72 698 T
(ork parameters such as the end-to-end delay and loss ratio.) 212.86 698 T
72 828/G1000335 FmPA
72 814/G998979 FmPA
0 14 Q
(OPTIONS) 72 640.67 T
72 785/G999092 FmPA
72 241/G997449 FmPA
0 12 Q
(T) 224.21 616 T
(able 1: Command line Options) 231.11 616 T
72 760/G998982 FmPA
2 10 Q
(Option) 104.91 590 T
76 734/G998988 FmPA
(Semantics) 285.45 590 T
162 734/G998990 FmPA
(Combinations) 463.14 588.67 T
2 8 Q
(1) 519.26 592.67 T
450 733/G998995 FmPA
75.6 229 536.4 235 C
0 0 0 1 0 0 0 1 K
0 0 612 792 C
0 0 0 1 0 0 0 1 K
2 9 Q
0 X
(1.) 93.6 223 T
(Only certain combinations are v) 105.6 223 T
(alid due to dif) 220.85 223 T
(ferent scales as well as units.) 270.88 223 T
76 367/G998994 FmPA
1 11 Q
(-SQ) 81.6 566 T
76 710/G998997 FmPA
2 10 Q
(Plot of P) 168 564 T
(ack) 202.86 564 T
(et Sequence Numbers) 216.64 564 T
2 8 Q
(2) 303.84 568 T
162 708/G999003 FmPA
2 9 Q
(2.) 93.6 212 T
(The sequence numbers refer to the cumulati) 105.6 212 T
(v) 263.33 212 T
(e byte counts in case of TCP traf) 267.7 212 T
(\336c, and pack) 385.2 212 T
(et IDs in case of UDP) 430.85 212 T
76 356/G999002 FmPA
(traf) 105.6 201 T
(\336c.) 117.87 201 T
1 11 Q
(-SQ & -DR) 456 566 T
450 710/G999005 FmPA
(-DR) 81.6 543.33 T
76 687/G999007 FmPA
2 10 Q
(Plot of the Sequence Numbers of the Dropped P) 168 541.33 T
(ack) 360.6 541.33 T
(ets) 374.38 541.33 T
2 8 Q
(3) 385.49 545.33 T
162 685/G999012 FmPA
2 9 Q
(3.) 93.6 190 T
(Useful only when UDP protocol is selected.) 105.6 190 T
76 334/G999011 FmPA
1 11 Q
(-SQ & -DR) 456 543.33 T
450 687/G999014 FmPA
(-R) 81.6 520.67 T
76 665/G999016 FmPA
2 10 Q
(Plot of the Recei) 168 518.67 T
(v) 234.69 518.67 T
(e Rate) 239.54 518.67 T
2 8 Q
(4) 264.81 522.67 T
162 663/G999023 FmPA
2 9 Q
(4.) 93.6 179 T
(The rates are calculated o) 105.6 179 T
(v) 197.43 179 T
(er a time windo) 201.79 179 T
(w) 257.81 179 T
(, whose def) 263.72 179 T
(ault size is 1.0 sec. It can be modi\336ed by adjusting the) 304.87 179 T
76 323/G999022 FmPA
3 F
($r) 105.6 168 T
(ate_computation_window) 113.47 168 T
2 F
(v) 208.72 168 T
(ariable in the) 213 168 T
1 F
(gengraph.pl) 262.24 168 T
2 F
( script.) 321.64 168 T
1 11 Q
(-R & -S) 456 520.67 T
450 665/G999025 FmPA
(-S) 81.6 498 T
76 642/G999027 FmPA
2 10 Q
(Plot of the Send Rate) 168 498.67 T
162 643/G999029 FmPA
1 11 Q
(-R & -S) 456 498 T
450 642/G999031 FmPA
(-IS) 81.6 477 T
76 621/G999033 FmPA
2 10 Q
(Plot of the Inter) 168 477.67 T
(-Departure times at the Sender) 230.85 477.67 T
162 622/G999035 FmPA
1 11 Q
(-IS & -IR) 456 477 T
450 621/G999037 FmPA
(-IR) 81.6 456 T
76 600/G999039 FmPA
2 10 Q
(Plot of the Inter) 168 456.67 T
(-Arri) 230.85 456.67 T
(v) 250.59 456.67 T
(al times at the Recei) 255.34 456.67 T
(v) 336.19 456.67 T
(er) 341.04 456.67 T
162 601/G999041 FmPA
1 11 Q
(-IS & -IR) 456 456 T
450 600/G999043 FmPA
(-D) 81.6 435 T
76 579/G999045 FmPA
2 10 Q
(Plot of the End-to-end Delay of P) 168 433 T
(ack) 302.28 433 T
(ets \050UDP\051) 316.06 433 T
2 8 Q
(5) 356.33 437 T
162 577/G999047 FmPA
2 9 Q
(5.) 93.6 157 T
(The rates are calculated o) 105.6 157 T
(v) 197.43 157 T
(er a time windo) 201.79 157 T
(w) 257.81 157 T
(, whose def) 263.72 157 T
(ault size is 0.5 sec. It can be modi\336ed by adjusting the) 304.87 157 T
76 301/G1000299 FmPA
3 F
($aver) 105.6 146 T
(a) 125.96 146 T
(g) 130.37 146 T
(e_delay_computation_window) 134.78 146 T
2 F
(v) 247.03 146 T
(ariable in the) 251.3 146 T
1 F
(gengraph.pl) 300.54 146 T
2 F
( script.) 359.94 146 T
450 580/G999049 FmPA
1 11 Q
(-AD) 81.6 412.33 T
76 556/G999117 FmPA
2 10 Q
(Plot of the A) 168 413 T
(v) 218.65 413 T
(erage End-to-end Delay \050UDP\051) 223.5 413 T
162 557/G999119 FmPA
450 557/G999121 FmPA
1 11 Q
(-J) 81.6 391.33 T
76 535/G999051 FmPA
2 10 Q
(Plot of Jitter at the Recei) 168 392 T
(v) 266.91 392 T
(er) 271.76 392 T
162 536/G999053 FmPA
450 536/G999055 FmPA
1 11 Q
(-AJ) 81.6 370.33 T
76 514/G999132 FmPA
2 10 Q
(Plot of the A) 168 368.33 T
(v) 218.65 368.33 T
(erage Jitter) 223.5 368.33 T
2 8 Q
(6) 267.65 372.33 T
162 512/G999134 FmPA
2 9 Q
(6.) 93.6 135 T
(The rates are calculated o) 105.6 135 T
(v) 197.43 135 T
(er a time windo) 201.79 135 T
(w) 257.81 135 T
(, whose def) 263.72 135 T
(ault size is 0.5 sec. It can be modi\336ed by adjusting the) 304.87 135 T
76 279/G999138 FmPA
3 F
($aver) 105.6 124 T
(a) 125.96 124 T
(g) 130.37 124 T
(e_jitter_computation_window) 134.78 124 T
2 F
(v) 245.04 124 T
(ariable in the) 249.31 124 T
1 F
(gengraph.pl) 298.55 124 T
2 F
( script.) 357.95 124 T
450 515/G999136 FmPA
1 11 Q
(-L) 81.6 347.67 T
76 492/G999057 FmPA
2 10 Q
(Plot of Lengths of the pack) 168 348.33 T
(ets at the Sender side \050UDP\051) 276.5 348.33 T
162 492/G999059 FmPA
450 492/G999061 FmPA
1 11 Q
(-h, --help) 81.6 326.67 T
76 471/G999063 FmPA
2 10 Q
(Prints this list of options) 168 327.33 T
162 471/G999065 FmPA
450 471/G999067 FmPA
1 11 Q
(-c) 81.6 305.67 T
3 10 Q
(client-\336le) 97.3 305.67 T
76 450/G999069 FmPA
2 F
(Client-side log \336le name) 168 306.33 T
162 450/G999071 FmPA
450 450/G999073 FmPA
1 11 Q
(-s) 81.6 284.67 T
3 10 Q
(server) 97.3 284.67 T
(-\336le) 122.09 284.67 T
76 429/G999075 FmPA
2 F
(Serv) 168 285.33 T
(er) 186.18 285.33 T
(-side log \336le name) 193.75 285.33 T
162 429/G999077 FmPA
450 429/G999079 FmPA
1 11 Q
(-o) 81.6 263.67 T
3 10 Q
(output-\336le) 101.4 263.67 T
76 408/G999081 FmPA
2 F
(Name of the output \336le) 168 264.34 T
162 408/G999083 FmPA
450 408/G999085 FmPA
1 11 Q
(-f) 81.6 242.67 T
3 10 Q
(format) 101.4 242.67 T
76 387/G999087 FmPA
2 F
(T) 168 243.34 T
(ar) 173.31 243.34 T
(get graphical tool) 180.9 243.34 T
162 387/G999089 FmPA
450 387/G999091 FmPA
75.6 605.88 75.6 235.13 2 L
V
0.25 H
0 Z
N
162 606.12 162 234.88 2 L
V
N
450 606.12 450 234.88 2 L
V
N
536.4 605.88 536.4 235.13 2 L
V
N
75.47 606 536.53 606 2 L
V
N
75.47 579.33 536.53 579.33 2 L
V
N
75.47 556.67 536.53 556.67 2 L
V
N
75.47 534 536.53 534 2 L
V
N
75.47 511.33 536.53 511.33 2 L
V
N
75.47 490.33 536.53 490.33 2 L
V
N
75.47 469.33 536.53 469.33 2 L
V
N
75.47 448.33 536.53 448.33 2 L
V
N
75.47 425.67 536.53 425.67 2 L
V
N
75.47 404.67 536.53 404.67 2 L
V
N
75.47 383.67 536.53 383.67 2 L
V
N
75.47 361 536.53 361 2 L
V
N
75.47 340 536.53 340 2 L
V
N
75.47 319 536.53 319 2 L
V
N
75.47 298 536.53 298 2 L
V
N
75.47 277 536.53 277 2 L
V
N
75.47 256 536.53 256 2 L
V
N
75.47 235 536.53 235 2 L
V
N
[/CropBox[0 0 FmDC 612 792 FmDC FmBx]/PAGE FmPD
[/Dest/P.3/DEST FmPD2
[/Dest/L/DEST FmPD2
106 362/I1.999001 FmPA
106 329/I1.999020 FmPA
106 329/I1.999021 FmPA
106 307/I1.1000297 FmPA
106 307/I1.1000298 FmPA
106 285/I1.999141 FmPA
106 285/I1.999142 FmPA
[/Title(1)/Rect[63 63 549 729]/ARTICLE FmPD2
[/Page 1/View[/XYZ null 63 855 FmDC exch pop null]/Title(NAME)/OUT FmPD
[/Page 1/View[/XYZ null 63 791 FmDC exch pop null]/Title(SYNOPSIS)/OUT FmPD
[/Page 1/View[/XYZ null 63 699 FmDC exch pop null]/Title(DESCRIPTION)/OUT FmPD
[/Page 1/View[/XYZ null 63 635 FmDC exch pop null]/Title(OPERATION)/OUT FmPD
[/Page 2/View[/XYZ null 72 430 FmDC exch pop null]/Title(NOTES)/OUT FmPD
[/Page 3/View[/XYZ null 72 794 FmDC exch pop null]/Title(OPTIONS)/Count 1/OUT FmPD
[/Page 3/View[/XYZ null 272 768 FmDC exch pop null]/Title(Table 1: Command line Options)/OUT FmPD
[ /PageMode /UseOutlines /Page 1 /View [/XYZ null null null] /DOCVIEW FmPD2
FMENDPAGE
%%EndPage: "3" 3
%%Trailer
FMENDDOCUMENT
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 3
%%DocumentFonts: Times-Bold
%%+ Courier-Bold
%%+ Times-Roman
%%+ Times-Italic
%%DocumentNeedsFonts: Times-Bold
%%+ Courier-Bold
%%+ Times-Roman
%%+ Times-Italic
%%DocumentSuppliedFonts:
%%EOF
